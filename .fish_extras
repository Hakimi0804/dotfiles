#!/bin/fish

# Fuck GO
#set -gx GOROOT /usr/local/go
#set -gx PATH $PATH:$GOROOT/bin

#set -gx GOPATH $HOME/golib
#set -gx PATH $PATH:$GOPATH/bin
#set -gx GOPATH $GOPATH:$HOME/github-repo/golang

##################
# chroot env setup
##################
set -g is_chroot false

if not test -e /usr/bin/systemctl
    function systemctl
        return 0
    end
end

test -e /bin/rpm || test -e /bin/dpkg || test -e /bin/pacman
and set -gx PREFIX ''

test -e /bin/systemctl
and if /bin/systemctl list-units 2>&1 | $PREFIX/bin/grep -qi "running in chroot"
    set -g is_chroot true # We know that we are in chroot
    if status is-interactive
        # Commands to run in interactive sessions can go here
        set and_vars ANDROID_ART_ROOT ANDROID_DATA ANDROID_I18N_ROOT ANDROID_ROOT ANDROID_TZDATA_ROOT BOOTCLASSPATH DEX2OATBOOTCLASSPATH
        for var in $and_vars
            set -e $var
        end

        if contains /system/bin $PATH # Then our path is wrong
            set -gx PATH /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin
        end


        # Configure command not found handler
        # /usr/libexec/pk-command-not-found
        # won't work because it requires PackageKit
        # to be running.
        function fish_command_not_found
            set -l brred (set_color brred)
            set -l brwhite (set_color brwhite)
            set -l brblack (set_color brblack)
            set -l norm (set_color normal)

            echo $brred"Command not found:$brwhite $argv[1]" >&2
            echo $brblack"Calling `dnf provides $argv[1]`...$norm" >&2
            set dnf_provides_filtered "$(dnf provides --color=always /usr/bin/$argv[1] /usr/sbin/$argv[1] 2>/dev/null)" # First filter out no matches f
            echo $dnf_provides_filtered >&2

            fish_command_not_found::extra $argv[1]
            return 127
        end

        function fish_command_not_found::extra
            # This function prints similar commands,
            # e.g. clesr -> clear
            set_color brblack
            echo
            echo "Searching for similar commands"
            set_color normal

            set -l alphanum 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
            set list_indices (seq (string split '' $argv | count))
            set split_cmd (string split '' $argv)
            set -l matches
            for index in $list_indices
                debug "Processing index $index"

                set tmp_split_cmd $split_cmd
                for alnum in (string split '' $alphanum)
                    set tmp_split_cmd[$index] $alnum
                    set joint (string join '' $tmp_split_cmd)

                    debug "Joint result: $joint"

                    if command -sq $joint
                        set -a matches $joint
                    end
                end
            end

            if test -n "$matches"
                echo "Similar command(s):"
                for match in $matches
                    echo "    $match ($(command -s $match))"
                end
            end
        end

        function debug
            if set -q debug
                set_color yellow
                echo -- $argv
                set_color normal
            end
        end
    end

    # Set locale; since we're in container the responsible
    # systemd unit won't work to set locale for us
    locale 2>/dev/null | string replace = ' ' | string replace -ar '^' 'set -gx ' | string replace -a en_US C | source
    set -gx TZ Asia/Kuala_Lumpur
end

######################
# end chroot env setup
######################

if status is-interactive
    and test "$is_chroot" = false
    # pk-command-not-found is super slow in some cases,
    # so ask if we need it.

    # Do not break termux's handler
    if not command -sq termux-setup-storage
        function fish_command_not_found
            set -l prompt_stat

            function __fish_command_not_found_ask -S
                read -n1 -p "echo -n 'Call pk-command-not-found?[y/n]: '" prompt_stat
            end

            __fish_command_not_found_ask
            if string match -qi y $prompt_stat
                /usr/libexec/pk-command-not-found $argv
            else if string match -qi n $prompt_stat
                functions -e __fish_command_not_found_ask
                return 127
            else
                fish_command_not_found $argv
            end
        end
    end
end

# DNF
if status is-interactive
    if command -sq dnf
        set __all_dnf_shorts update update-refresh update-nometaref ins ins-nometaref ins-refresh metacache clean clean-all search searchq list list-largest
        echo (set_color brcyan)"DNF functions:"
        for __dnf_short in $__all_dnf_shorts
            echo (set_color green)"     $__dnf_short"(set_color normal)
        end

        test -d $HOME/.config/fish/functions/dnf_functions
        and set -g fish_function_path $fish_function_path
        and set -ga fish_function_path $HOME/.config/fish/functions/dnf_functions
    end
end
