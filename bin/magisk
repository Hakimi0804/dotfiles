#!/bin/fish
echo (set_color brblack)"Loading"(set_color normal)
set -g this_script (basename (status filename))
set -g tmp_dir_name $HOME/$this_script.tmp

alias sc="set_color"
set -g cyan (sc cyan)
set -g norm (sc normal)
set -g red (sc red)

function magisk.usage --on-event usage
  echo (sc brmagenta)"USAGE:"(sc normal)
  echo "  $this_script actions sub-action ..[more sub-actions]"
  echo
  echo (sc brmagenta)"AVAILABLE ACTIONS:"(sc normal)
  echo "  module"
  echo "  apk"
  echo "  zip"
  echo
  echo (sc brmagenta)"AVAILABLE SUB-ACTIONS FOR MODULE:"(sc reset)
  echo "  quick-create $cyan<post-fs/service/sepolicy/prop>$norm"
  echo "  create$cyan [module-name]$norm"
  echo "  install $cyan<file-path>$norm"
  echo "  remove $cyan<module-ID>$norm"
  echo "  list"
  echo
  echo (sc brmagenta)"AVAILABLE SUB-ACTION FOR APK:"(sc reset)
  echo "  download$cyan [canary]$norm"
  echo
  echo (sc brmagenta)"AVAILABLE SUB-ACTION FOR ZIP:"(sc reset)
  echo "  download$cyan [canary]$norm"
end

function magisk.action.module::prepare_tmp_dir
  set -l module_id script_autogenerated_module-$tmp_dir_number
  test -n "$argv[1]"
    and set module_id $argv[1]
  echo (set_color brmagenta)"Preparing module files"(set_color normal)
  set -g tmp_dir_number (shuf -i 10000-50000 -n1)
  set -g tmp_dir_name "$HOME/$tmp_dir_number-magisk_tmpdir"
  mkdir $tmp_dir_name
  cd $tmp_dir_name
  mkdir -p META-INF/com/google/android
  curl -s https://raw.githubusercontent.com/topjohnwu/Magisk/master/scripts/module_installer.sh -o META-INF/com/google/android/update-binary
  printf '#MAGISK' > META-INF/com/google/android/updater-script
  echo "\
id=$module_id
name=Generated module by Hakimi's magisk script
version=1
versionCode=v1
author=Auto generated Hakimi0804
description=Auto generated module
" > module.prop
  echo "\
#!/system/bin/sh
# Post-fs-data script. This script will be ran very early during
# the boot process and is BLOCKING. Use service.sh instead if
# you don't need the script to run very early. This script will
# be ran before modules are mounted.
MODDIR=\${0%/*}
" > post-fs-data.sh
  echo "\
#!/system/bin/sh
# Late-start service mode script. This stage is NON-BLOCKING.
# The script will run in parallel with the boot sequence and
# this is the recommended way stage mode to run most script.
MODDIR=\${0%/*}
" > service.sh
  echo "\
#!/system/bin/sh
# cuztomization script. This script will be sourced by Magisk's
# module installer. Add SKIPUNZIP=1 to handle everything by yourself.
" > customize.sh
  echo "\
# custom sepolicy rule.
# Put your custom SELinux policy here.
" > sepolicy.rule
  echo "\
# system.prop. Override any system prop, including RO props by adding
# them here in the format of key=value pair. Example:
# ro.sf.lcd_density=420
" > system.prop
end

function magisk.action.module::zip_and_flash --on-event 'zip_flash'
  zip -r autogenerated.zip .
  if not adb get-state
    echo (set_color brblack)"Waiting for device..."(set_color normal)
    adb wait-for-device
  end
  adb push autogenerated.zip /data/local/tmp
  adb shell "su -c 'magisk --install-module /data/local/tmp/autogenerated.zip'"
  adb shell "rm -f /data/local/tmp/autogenerated.zip"
end

function magisk.action.module::cleanup --on-event 'cleanup'
  cd ..
  rm -rf tmp_dir_name
end

function magisk.action.module --on-event 'module'
  set -l sub_action $argv[1]
  set -l sub_action_two $argv[2]
  switch $sub_action
    case 'quick-create'
      if not set -q sub_action
        echo (set_color brred)"Error, sub-action is not given"(set_color normal) >&2
        return
      end

      magisk.action.module::prepare_tmp_dir
      switch $sub_action_two
        case 'post-fs'
          echo (set_color brmagenta)"Opening nano"(set_color normal)
          nano post-fs-data.sh
          emit zip_flash
          emit cleanup
        case 'service'
          echo (set_color brmagenta)"Opening nano"(set_color normal)
          nano service.sh
          emit zip_flash
          emit cleanup
        case 'sepolicy'
          echo (set_color brmagenta)"Opening nano"(set_color normal)
          nano sepolicy.rule
          emit zip_flash
          emit cleanup
        case 'prop'
          echo (set_color brmagenta)"Opening nano"(set_color normal)
          nano system.prop
          emit zip_flash
          emit cleanup
        case '*'
          echo (set_color brred)"Invalid option for quick-create" >&2
          return
        end

    case 'create'
      magisk.action.module::prepare_tmp_dir $sub_action_two
      echo (set_color brcyan)"You will be walked through all files."
      echo "Opening nano in 3 seconds"(set_color normal)
      sleep 3
      set -l files module.prop post-fs-data.sh service.sh customize.sh sepolicy.rule system.prop
      for file in $files
        echo (set_color brblue)"  Opening: $file"(set_color normal)
        nano $file
      end
      echo (set_color brcyan)"Using fish breakpoint. Add files as you wish and use `exit` to continue."
      breakpoint
      emit zip_flash
      emit cleanup
    case 'install'
      if not set -q sub_action_two
        echo (set_color brred)"Error: File name not provided"(set_color normal) >&2
        return
      end
      adb shell "su -c 'magisk --install-module $sub_action_two'"
    case 'remove'
      if not set -q sub_action_two
        echo (set_color brred)"Error: Module ID not provided"(set_color normal) >&2
        return
      end
      echo (set_color bryellow)"Warning: This will use `rm -rf` and not run the module uninstall script."(set_color normal)
      adb shell "su -c 'rm -rf /data/adb/modules/$sub_action_two'"
    case 'list'
      set -l modules (adb shell "su -c 'ls /data/adb/modules'")
      echo (set_color brwhite)"Installed modules:"
      for module in $modules
        echo (set_color yellow)"  $module"
      end
    case '*'
      echo (set_color brred)"Missing arguments."(set_color normal) >&2
      emit usage
  end
end

function magisk.action.apk_zip::get_latest
  set -g latest_magisk (
    curl -s https://api.github.com/repos/topjohnwu/Magisk/releases/latest \
      | grep "Magisk-v**.*.apk" \
      | cut -d : -f 2,3 \
      | tr -d \" \
      | cut -d, -f2 \
      | tr -d '\n' \
      | tr -d ' '
  )
end

function magisk.action.apk_zip --on-event 'apk_zip'
  magisk.action.apk_zip::get_latest
  rm -f (basename $latest_magisk)
  echo (set_color brmagenta)"Downloading"(set_color normal)
  if test "$argv[2]" = canary
    aria2c -q 'https://raw.githubusercontent.com/topjohnwu/magisk-files/canary/app-debug.apk'
  else
    aria2c -q $latest_magisk
  end

  if test "$argv[1]" = apk
    echo (set_color brgreen)"Downloaded APK."(set_color normal)
  else if test "$argv[1]" = zip
    echo (set_color brgreen)"Downloaded zip."(set_color normal)
    set -l new_filename (string replace -r '.apk$' '.zip' (basename $latest_magisk))
    mv (basename $latest_magisk) $new_filename
  end
end

if test (count $argv) -eq 0
  echo (set_color brred)"No arguments provided"(set_color normal) >&2
  emit usage
  exit 1
end

switch $argv[1]
  case 'module'
    set -e argv[1]
    emit module $argv
  case 'zip'
    emit apk_zip $argv
  case 'apk'
    emit apk_zip $argv
  case '*'
    echo (set_color brred)"Invalid action."(set_color normal)
end
